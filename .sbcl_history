12
(disassemble (lambda (x) (list x)))
(disassemble (lambda (x) (list x x)))
(lisp-implementation-version)
A formal parsing algorithm should not always be used.
                -- D. Gries
Truly simple systems... require infinite testing.
                -- Norman Augustine
wbooze@localhost:~$ sbclim-plane 
This is SBCL 1.1.8, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.
SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
To load "clx":
  Load 1 ASDF system:
    clx
; Loading "clx"
To load "esa":
  Load 1 ASDF system:
    esa
; Loading "esa"
...........
To load "mcclim":
  Load 1 ASDF system:
    mcclim
; Loading "mcclim"
To load "clouseau":
  Load 1 ASDF system:
    clouseau
; Loading "clouseau"
To load "clim-clx":
  Load 1 ASDF system:
    clim-clx
; Loading "clim-clx"
To load "esa-mcclim":
  Load 1 ASDF system:
    esa-mcclim
; Loading "esa-mcclim"
To load "drei-tests":
  Load 1 ASDF system:
    drei-tests
; Loading "drei-tests"
To load "mcclim-freetype":
  Load 1 ASDF system:
    mcclim-freetype
; Loading "mcclim-freetype"
....
To load "clim-examples":
  Load 1 ASDF system:
    clim-examples
; Loading "clim-examples"
;; try (CLIM-DEMO::DEMODEMO)
To load "clim-listener":
  Load 1 ASDF system:
    clim-listener
; Loading "clim-listener"
To load "climacs":
  Load 1 ASDF system:
    climacs
; Loading "climacs"
; file: /home/wbooze/quicklisp/dists/quicklisp/software/mcclim-20130312-cvs/Lisp-Dep/mp-sbcl.lisp
; in: DEFUN DISABLE-PROCESS
;     (SB-THREAD:GET-MUTEX CLIM-INTERNALS::*PERMANENT-QUEUE*)
; 
; caught STYLE-WARNING:
;   SB-THREAD:GET-MUTEX has been deprecated as of SBCL 1.0.37.33. Use
;   SB-THREAD:GRAB-MUTEX instead.
;   
;   In future SBCL versions SB-THREAD:GET-MUTEX will signal a full warning at
;   compile-time.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
STYLE-WARNING:
   Implicitly creating new generic function CLIM-DEBUGGER::EXPAND-BACKTRACE.
; file: /home/wbooze/quicklisp/dists/quicklisp/software/mcclim-20130312-cvs/Apps/Debugger/clim-debugger.lisp
; in: DEFUN MAKE-DEBUGGER-PANE
;     #'CLIM-DEBUGGER::DISPLAY-DEBUGGER
; 
; caught STYLE-WARNING:
;   undefined function: DISPLAY-DEBUGGER
; 
; compilation unit finished
;   Undefined function:
;     DISPLAY-DEBUGGER
;   caught 1 STYLE-WARNING condition
; in: DEFUN DISPLAY-DEBUGGER
;     (CLIM-DEBUGGER::DISPLAY-BACKTRACE CLIM-DEBUGGER::FRAME CLIM:PANE)
; 
; caught STYLE-WARNING:
;   undefined function: DISPLAY-BACKTRACE
; 
; compilation unit finished
;   Undefined function:
;     DISPLAY-BACKTRACE
;   caught 1 STYLE-WARNING condition
To load "functional-geometry":
  Load 1 ASDF system:
    functional-geometry
; Loading "functional-geometry"
2
0
(mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
        '(1 2 3 4)
        '(a b c d e)
        '(x y z))
0
(mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
        '(1 2 3 4)
        '(a b c d e)
        '(x y z)))
0
(mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
        '(1 2 3 4)
        '(a b c d e)
        '(x y z))
0
(mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
        '(1 2 3 4)
        '(a b c d e)
        '(x y z))
0
dummy
0
(mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
        '(1 2 3 4)
        '(a b c d e)
        '(x y z))
0
(defvar dummy)
(mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
        '(1 2 3 4)
        '(a b c d e)
        '(x y z))
0
(setq dummy nil)
(mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
        '(1 2 3 4)
        '(a b c d e)
        '(x y z)) 
(mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
        '(1 2 3 4)
        '(a b c d e)
        '(x y z)) 
(mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
        '(1 2 3 4)
        '(a b c d e)
        '(x y z)) 
(mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
        '(1 2 3 4)
        '(a b c d e)
        '(x y z))
dummy
(setq dummy nil)
(mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
        '(1 2 3 4)
        '(a b c d e)
'(x y z)) 
dummy
(clm)
(quit)
(clm)
(quit)
(primep 2)
0
load("/home/wbooze/lisp/math.lisp")
0
(load "/home/wbooze/lisp/math.lisp")
(primep 2)
0
(m-test:primep 2)
1
0
(m-test::primep 2)
(loop for n from 1 to 10 do (if (m-test::primep n) (print n)))
(loop for n from 1 to inf do (if (m-test::primep n) (print n)))
0
(loop for n from 1 to -1 do (if (m-test::primep n) (print n)))
(loop for n from 1 to -1/0 do (if (m-test::primep n) (print n)))
0
(loop for n from 1 to 0/-1 do (if (m-test::primep n) (print n)))
0
(loop for n from 1 to (/ n n) do (if (m-test::primep n) (print n)))
0
(while true do (if (m-test::primep n) (print n)))
0
(loop while true do (if (m-test::primep n) (print n)))
0
(loop while 't do (if (m-test::primep n) (print n)))
0
(loop for n:1 to 10000 (if (m-test::primep n) (print n)))
0
(loop for n:1 to 10000 do (if (m-test::primep n) (print n)))
0
(loop for n 1 to 10000 do (if (m-test::primep n) (print n)))
0
(loop for n from 1 to 10000 do (if (m-test::primep n) (print n)))
(loop for n from 1 to 100000 do (if (m-test::primep n) (print n)))
(loop for n from 1 to 10000000000000000000000000000000000000000000000000000 do (if (m-test::primep n) (print n)))
1
(null 1)
(loop for n from 1 to m do (if (m-test::primep n) (print n)))
0
(setq m (null m)) (loop for n from 1 to m do (if (m-test::primep n) (print n)))
(defvar m) (setq m (null m)) (loop for n from 1 to m do (if (m-test::primep n) (print n)))
0
(defvar m) (setq m `(null m)) (loop for n from 1 to m do (if (m-test::primep n) (print n)))
0
(loop for n from 1 to (null m) do (if (m-test::primep n) (print n)))
0
(loop for n from 1 to (null n) do (if (m-test::primep n) (print n)))
0
(loop for n from 1 to null do (if (m-test::primep n) (print n)))
0
(loop for n from 1 to (null 0) do (if (m-test::primep n) (print n)))
0
(null 0)
(null nil)
(loop for n from 1 to nil do (if (m-test::primep n) (print n)))
(coerce 'number nil)
0
(coerce nil 'number)
0
(loop for n from 1 to 0 do (if (m-test::primep n) (print n)))
(loop for n from 1 to (not 0) do (if (m-test::primep n) (print n)))
(if (t) 
(loop for n from 1 to if(t) do (if (m-test::primep n) (print n)))
0
(describe 'while)
(apropos 'while)
(loop for n from 1 to 1000000 (m-test::primep n) (print n)))
0
(loop for n from 1 to 1000000 do (m-test::primep n) (print n)))
0
(loop for n from 1 to n+1 do (m-test::primep n) (print n))
0
(loop for n from 1 to 1+n do (m-test::primep n) (print n))
0
(loop for n from 1 to (1+ n) do (m-test::primep n) (print n))
0
(let ((n 1)) (loop for n from n to n+1 do (m-test::primep n) (print n)))
0
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n) (1+ n))))
1
(let ((n 1)) (loop while t do (if (m-test::primep n) (progn (print n) (1+ n)))))
1
(let ((n 1)) (loop while t do (if (m-test::primep n) (progn (print n) (setq n n+1)))))
0
(let ((n 1)) (loop while t do (if (m-test::primep n) (progn (print n) (setq n (+1 n))))))
0
(let ((n 1)) (loop while t do (if (m-test::primep n) (progn (print n) (setq n (+ n 1))))))
1
(let ((n 1)) (loop while t do (if (m-test::primep n) (progn (print n) (setq n (+ n 1))))))
1
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n) (setq n (+ n 1)))))
1
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1))))
1
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1))))
1
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1))))
1
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1)) (if (eq n 1000) abort)))
0
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1)) (if (eq n 1000) fail)))
0
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1)) (if (eq n 1000) exit)))
0
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1)) (if (eq n 1000) stop)))
0
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1)) (if (eq n 1000) (abort))))
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1)) (while (< n 1000) (abort))))
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1)) (while (> n 1000) (abort))))
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1)) (when (< n 1000) (abort))))
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1)) (when (> n 1000) (abort))))
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1)) (when (> n 10000) (abort))))
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1)) (when (> n 100001) (abort))))
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1)) (when (> n 10002) (abort))))
(let ((n 1)) (loop while t do (if (m-test::primep n) (print n)) (setq n (+ n 1)) (when (>= n 10001) (abort))))
(m-test::primpe 9973)
0
(m-test::primep 9973)
(let ((n 1) (counter 0)) (loop while t do (if (m-test::primep n) (print n) (setq counter (+ counter 1))) (setq n (+ n 1)) (when (>= counter 10001) (abort))))
(let ((n 1) (counter 0)) (loop while t do (if (m-test::primep n) (progn (print n) (setq counter (+ counter 1)))) (setq n (+ n 1)) (when (>= counter 10001) (abort))))
(let ((n 1) (counter 0)) (loop while t do (if (m-test::primep n) (progn (print n) (setq counter (+ counter 1)))) (setq n (+ n 1)) (when (> counter 10001) (abort))))
(quit)
(clm)
(quit)
(list-all-packages)
(clm)
(quit)
(clm)
bt
backtrace
quit
y
10
